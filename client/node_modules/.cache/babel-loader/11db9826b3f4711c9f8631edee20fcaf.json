{"ast":null,"code":"import _defineProperty from \"C:\\\\projects\\\\tt-demo\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"C:\\\\projects\\\\tt-demo\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\projects\\\\tt-demo\\\\client\\\\src\\\\messenger\\\\messenger.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Fragment, Component, useEffect, useState } from 'react';\nimport io from 'socket.io-client';\nconst socket = io('http://localhost:5000');\n\nconst Messenger = () => {\n  const _useState = useState({\n    clients: []\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        state = _useState2[0],\n        setState = _useState2[1];\n\n  socket.on('connect', () => {\n    console.log('Client connected');\n  });\n  socket.on('allClients', clients => {\n    setState(_objectSpread({}, state, {\n      clients: clients.clients\n    }));\n  });\n  socket.on('socketId', msg => {\n    console.log(msg);\n\n    if (localStorage.token) {\n      socket.emit('token', {\n        token: localStorage.token,\n        socketId: msg.socketId\n      });\n    }\n  });\n  socket.on('privateMsgClient', msg => {\n    console.log(msg.msg);\n  });\n\n  const selectSend = client => {\n    console.log(client);\n    socket.emit('privateMsgServer', {\n      to: client,\n      msg: 'Пошел нахуй'\n    });\n  };\n\n  const clients = state.clients;\n  console.log(clients);\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, clients.length === 0 ? React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }) : React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, clients.map((client, index) => React.createElement(\"p\", {\n    key: index,\n    onClick: () => selectSend(client),\n    value: client,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, client))));\n};\n\nexport default Messenger;","map":{"version":3,"sources":["C:\\projects\\tt-demo\\client\\src\\messenger\\messenger.js"],"names":["React","Fragment","Component","useEffect","useState","io","socket","Messenger","clients","state","setState","on","console","log","msg","localStorage","token","emit","socketId","selectSend","client","to","length","map","index"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,SAArC,EAAgDC,QAAhD,QAAgE,OAAhE;AACA,OAAOC,EAAP,MAAe,kBAAf;AACA,MAAMC,MAAM,GAAGD,EAAE,CAAC,uBAAD,CAAjB;;AAEA,MAAME,SAAS,GAAG,MAAM;AAAA,oBACIH,QAAQ,CAAC;AACjCI,IAAAA,OAAO,EAAE;AADwB,GAAD,CADZ;AAAA;AAAA,QACfC,KADe;AAAA,QACRC,QADQ;;AAKtBJ,EAAAA,MAAM,CAACK,EAAP,CAAU,SAAV,EAAqB,MAAM;AACzBC,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACD,GAFD;AAGAP,EAAAA,MAAM,CAACK,EAAP,CAAU,YAAV,EAAwBH,OAAO,IAAI;AACjCE,IAAAA,QAAQ,mBAAMD,KAAN;AAAaD,MAAAA,OAAO,EAAEA,OAAO,CAACA;AAA9B,OAAR;AACD,GAFD;AAGAF,EAAAA,MAAM,CAACK,EAAP,CAAU,UAAV,EAAsBG,GAAG,IAAI;AAC3BF,IAAAA,OAAO,CAACC,GAAR,CAAYC,GAAZ;;AACA,QAAIC,YAAY,CAACC,KAAjB,EAAwB;AACtBV,MAAAA,MAAM,CAACW,IAAP,CAAY,OAAZ,EAAqB;AACnBD,QAAAA,KAAK,EAAED,YAAY,CAACC,KADD;AAEnBE,QAAAA,QAAQ,EAAEJ,GAAG,CAACI;AAFK,OAArB;AAID;AACF,GARD;AAUAZ,EAAAA,MAAM,CAACK,EAAP,CAAU,kBAAV,EAA8BG,GAAG,IAAI;AACnCF,IAAAA,OAAO,CAACC,GAAR,CAAYC,GAAG,CAACA,GAAhB;AACD,GAFD;;AAGA,QAAMK,UAAU,GAAGC,MAAM,IAAI;AAC3BR,IAAAA,OAAO,CAACC,GAAR,CAAYO,MAAZ;AACAd,IAAAA,MAAM,CAACW,IAAP,CAAY,kBAAZ,EAAgC;AAAEI,MAAAA,EAAE,EAAED,MAAN;AAAcN,MAAAA,GAAG,EAAE;AAAnB,KAAhC;AACD,GAHD;;AAxBsB,QA6BdN,OA7Bc,GA6BFC,KA7BE,CA6BdD,OA7Bc;AA8BtBI,EAAAA,OAAO,CAACC,GAAR,CAAYL,OAAZ;AACA,SACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,OAAO,CAACc,MAAR,KAAmB,CAAnB,GACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,GAGC,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGd,OAAO,CAACe,GAAR,CAAY,CAACH,MAAD,EAASI,KAAT,KACX;AAAG,IAAA,GAAG,EAAEA,KAAR;AAAe,IAAA,OAAO,EAAE,MAAML,UAAU,CAACC,MAAD,CAAxC;AAAkD,IAAA,KAAK,EAAEA,MAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,MADH,CADD,CADH,CAJJ,CADF;AAeD,CA9CD;;AAgDA,eAAeb,SAAf","sourcesContent":["import React, { Fragment, Component, useEffect, useState } from 'react';\r\nimport io from 'socket.io-client';\r\nconst socket = io('http://localhost:5000');\r\n\r\nconst Messenger = () => {\r\n  const [state, setState] = useState({\r\n    clients: []\r\n  });\r\n\r\n  socket.on('connect', () => {\r\n    console.log('Client connected');\r\n  });\r\n  socket.on('allClients', clients => {\r\n    setState({ ...state, clients: clients.clients });\r\n  });\r\n  socket.on('socketId', msg => {\r\n    console.log(msg);\r\n    if (localStorage.token) {\r\n      socket.emit('token', {\r\n        token: localStorage.token,\r\n        socketId: msg.socketId\r\n      });\r\n    }\r\n  });\r\n\r\n  socket.on('privateMsgClient', msg => {\r\n    console.log(msg.msg);\r\n  });\r\n  const selectSend = client => {\r\n    console.log(client);\r\n    socket.emit('privateMsgServer', { to: client, msg: 'Пошел нахуй' });\r\n  };\r\n\r\n  const { clients } = state;\r\n  console.log(clients);\r\n  return (\r\n    <Fragment>\r\n      {clients.length === 0 ? (\r\n        <p></p>\r\n      ) : (\r\n        <Fragment>\r\n          {clients.map((client, index) => (\r\n            <p key={index} onClick={() => selectSend(client)} value={client}>\r\n              {client}\r\n            </p>\r\n          ))}\r\n        </Fragment>\r\n      )}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Messenger;\r\n"]},"metadata":{},"sourceType":"module"}