{"ast":null,"code":"import _defineProperty from \"C:\\\\projects\\\\tt-demo\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"C:\\\\projects\\\\tt-demo\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\projects\\\\tt-demo\\\\client\\\\src\\\\messenger\\\\messenger.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Fragment, Component, useEffect, useState } from 'react';\nimport io from 'socket.io-client';\nimport axios from 'axios';\nconst socket = io('http://localhost:5000');\n\nconst Messenger = () => {\n  const _useState = useState({\n    clients: []\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        state = _useState2[0],\n        setState = _useState2[1];\n\n  socket.on('connect', () => {\n    console.log('Client connected');\n  });\n  socket.on('disconnect', () => {\n    console.log('Client connected');\n  });\n  socket.on('allClients', clients => {\n    setState(_objectSpread({}, state, {\n      clients: clients.clients\n    }));\n  });\n  socket.on('socketId', msg => {\n    console.log(msg);\n\n    if (localStorage.token) {\n      socket.emit('token', {\n        token: localStorage.token,\n        socketId: msg.socketId\n      });\n    }\n  });\n  socket.on('privateMsgClient', msg => {\n    console.log(msg.msg);\n  });\n\n  const selectSend = client => {\n    console.log(client);\n    socket.emit('privateMsgServer', {\n      to: client,\n      msg: 'Пошел нахуй'\n    });\n  };\n\n  const refresh = async () => {\n    try {\n      const users = await axios.get('/api/users/all');\n      setState(_objectSpread({}, state, {\n        clients: users.data\n      }));\n    } catch (err) {\n      console.error(err);\n    }\n  }; //TODO При входе и обновлении страницы - обновление списков\n\n\n  const clients = state.clients;\n  console.log(clients);\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, clients.length === 0 ? React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, \"\\u041F\\u043E\\u043B\\u044C\\u0437\\u043E\\u0432\\u0430\\u0442\\u0435\\u043B\\u0435\\u0439 \\u043D\\u0435\\u0442\") : React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, clients.map(client => React.createElement(\"p\", {\n    key: client._id,\n    onClick: () => selectSend(client.client_socket),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, client.user_id))), React.createElement(\"h5\", {\n    onClick: () => refresh(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, \"\\u041E\\u0411\\u041D\\u041E\\u0412\\u0418\\u0422\\u042C\"));\n};\n\nexport default Messenger;","map":{"version":3,"sources":["C:\\projects\\tt-demo\\client\\src\\messenger\\messenger.js"],"names":["React","Fragment","Component","useEffect","useState","io","axios","socket","Messenger","clients","state","setState","on","console","log","msg","localStorage","token","emit","socketId","selectSend","client","to","refresh","users","get","data","err","error","length","map","_id","client_socket","user_id"],"mappings":"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","sourcesContent":["import React, { Fragment, Component, useEffect, useState } from 'react';\r\nimport io from 'socket.io-client';\r\nimport axios from 'axios';\r\nconst socket = io('http://localhost:5000');\r\n\r\nconst Messenger = () => {\r\n\r\n  const [state, setState] = useState({\r\n    clients: []\r\n  });\r\n\r\n  socket.on('connect', () => {\r\n    console.log('Client connected');\r\n  });\r\n\r\n    socket.on('disconnect', () => {\r\n      console.log('Client connected');\r\n    });\r\n\r\n  socket.on('allClients', clients => {\r\n    setState({ ...state, clients: clients.clients });\r\n  });\r\n\r\n  socket.on('socketId', msg => {\r\n    console.log(msg);\r\n    if (localStorage.token) {\r\n      socket.emit('token', {\r\n        token: localStorage.token,\r\n        socketId: msg.socketId\r\n      });\r\n    }\r\n  });\r\n\r\n  socket.on('privateMsgClient', msg => {\r\n    console.log(msg.msg);\r\n  });\r\n\r\n  const selectSend = client => {\r\n    console.log(client);\r\n    socket.emit('privateMsgServer', { to: client, msg: 'Пошел нахуй' });\r\n  };\r\n\r\n  const refresh = async () => {\r\n    try {\r\n      const users = await axios.get('/api/users/all');\r\n      setState({ ...state, clients: users.data });\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  //TODO При входе и обновлении страницы - обновление списков\r\n\r\n  const { clients } = state;\r\n  console.log(clients);\r\n  return (\r\n    <Fragment>\r\n      {clients.length === 0 ? (\r\n        <p>Пользователей нет</p>\r\n      ) : (\r\n        <Fragment>\r\n          {clients.map(client => (\r\n            <p\r\n              key={client._id}\r\n              onClick={() => selectSend(client.client_socket)}\r\n            >\r\n              {client.user_id}\r\n            </p>\r\n          ))}\r\n        </Fragment>\r\n      )}\r\n\r\n      <h5 onClick={() => refresh()}>ОБНОВИТЬ</h5>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Messenger;\r\n"]},"metadata":{},"sourceType":"module"}