{"ast":null,"code":"import _defineProperty from \"C:\\\\projects\\\\tt-demo\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"C:\\\\projects\\\\tt-demo\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\projects\\\\tt-demo\\\\client\\\\src\\\\messenger\\\\chats.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Fragment, Component, useEffect, useState } from 'react';\nimport io from 'socket.io-client';\nimport axios from 'axios';\nconst socket = io('http://localhost:5000');\n\nconst Chats = () => {\n  const _useState = useState({\n    chats: []\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        state = _useState2[0],\n        setState = _useState2[1];\n\n  const getAllChats = async () => {\n    console.log('Я прихожу');\n    const res = await axios.get('/api/chats');\n  };\n\n  const chats = state.chats;\n  console.log(chats);\n  socket.on('allChats', async clients => {\n    setState(_objectSpread({}, state, {\n      chats: res.data\n    }));\n  }); //TODO При обновлении или заходе на страницу получать диалоги\n  //TODO вместо id имена. И разделить на полученые и отправленные, как в вк\n  //TODO Как вк, при нажатии на сообщение, всплывает диалог, думаю c Route сделать\n\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"chats-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, \"\\u0417\\u0434\\u0435\\u0441\\u044C \\u0431\\u0443\\u0434\\u0443\\u0442 \\u0432\\u0441\\u0435 \\u0434\\u0438\\u0430\\u043B\\u043E\\u0433\\u0438\"), React.createElement(\"h5\", {\n    onClick: () => getAllChats(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, \"\\u041F\\u043E\\u043B\\u0443\\u0447\\u0438\\u0442\\u044C \\u0434\\u0438\\u0430\\u043B\\u043E\\u0433\\u0438\"), chats.length === 0 ? React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, \"\\u0423 \\u0442\\u0435\\u0431\\u044F \\u043D\\u0435\\u0442 \\u0434\\u0438\\u0430\\u043B\\u043E\\u0433\\u043E\\u0432\") : React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, chats.map(chat => React.createElement(\"div\", {\n    key: chat._id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, React.createElement(\"h4\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, chat.messages[0].user), React.createElement(\"h4\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, chat.messages[0].text))))));\n};\n\nexport default Chats;","map":{"version":3,"sources":["C:\\projects\\tt-demo\\client\\src\\messenger\\chats.js"],"names":["React","Fragment","Component","useEffect","useState","io","axios","socket","Chats","chats","state","setState","getAllChats","console","log","res","get","on","clients","data","length","map","chat","_id","messages","user","text"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,SAArC,EAAgDC,QAAhD,QAAgE,OAAhE;AACA,OAAOC,EAAP,MAAe,kBAAf;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,MAAMC,MAAM,GAAGF,EAAE,CAAC,uBAAD,CAAjB;;AAEA,MAAMG,KAAK,GAAG,MAAM;AAAA,oBACQJ,QAAQ,CAAC;AACjCK,IAAAA,KAAK,EAAE;AAD0B,GAAD,CADhB;AAAA;AAAA,QACXC,KADW;AAAA,QACJC,QADI;;AAKlB,QAAMC,WAAW,GAAG,YAAY;AAC9BC,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACA,UAAMC,GAAG,GAAG,MAAMT,KAAK,CAACU,GAAN,CAAU,YAAV,CAAlB;AAED,GAJD;;AALkB,QAUVP,KAVU,GAUAC,KAVA,CAUVD,KAVU;AAWlBI,EAAAA,OAAO,CAACC,GAAR,CAAYL,KAAZ;AACAF,EAAAA,MAAM,CAACU,EAAP,CAAU,UAAV,EAAsB,MAAMC,OAAN,IAAiB;AACjCP,IAAAA,QAAQ,mBACHD,KADG;AAEND,MAAAA,KAAK,EAAEM,GAAG,CAACI;AAFL,OAAR;AAIL,GALD,EAZkB,CAmBlB;AACA;AACA;;AACA,SACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mIADF,EAEE;AAAI,IAAA,OAAO,EAAE,MAAMP,WAAW,EAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mGAFF,EAGGH,KAAK,CAACW,MAAN,KAAiB,CAAjB,GACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2GADD,GAGC,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGX,KAAK,CAACY,GAAN,CAAUC,IAAI,IACb;AAAK,IAAA,GAAG,EAAEA,IAAI,CAACC,GAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKD,IAAI,CAACE,QAAL,CAAc,CAAd,EAAiBC,IAAtB,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKH,IAAI,CAACE,QAAL,CAAc,CAAd,EAAiBE,IAAtB,CAFF,CADD,CADH,CANJ,CADF,CADF;AAoBD,CA1CD;;AA4CA,eAAelB,KAAf","sourcesContent":["import React, { Fragment, Component, useEffect, useState } from 'react';\r\nimport io from 'socket.io-client';\r\nimport axios from 'axios';\r\nconst socket = io('http://localhost:5000');\r\n\r\nconst Chats = () => {\r\n  const [state, setState] = useState({\r\n    chats: []\r\n  });\r\n\r\n  const getAllChats = async () => {\r\n    console.log('Я прихожу');\r\n    const res = await axios.get('/api/chats');\r\n\r\n  };\r\n  const { chats } = state;\r\n  console.log(chats);\r\n  socket.on('allChats', async clients => {\r\n        setState({\r\n          ...state,\r\n          chats: res.data\r\n        });\r\n  });\r\n\r\n  //TODO При обновлении или заходе на страницу получать диалоги\r\n  //TODO вместо id имена. И разделить на полученые и отправленные, как в вк\r\n  //TODO Как вк, при нажатии на сообщение, всплывает диалог, думаю c Route сделать\r\n  return (\r\n    <Fragment>\r\n      <div className='chats-container'>\r\n        <p>Здесь будут все диалоги</p>\r\n        <h5 onClick={() => getAllChats()}>Получить диалоги</h5>\r\n        {chats.length === 0 ? (\r\n          <p>У тебя нет диалогов</p>\r\n        ) : (\r\n          <Fragment>\r\n            {chats.map(chat => (\r\n              <div key={chat._id}>\r\n                <h4>{chat.messages[0].user}</h4>\r\n                <h4>{chat.messages[0].text}</h4>\r\n              </div>\r\n            ))}\r\n          </Fragment>\r\n        )}\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Chats;\r\n"]},"metadata":{},"sourceType":"module"}